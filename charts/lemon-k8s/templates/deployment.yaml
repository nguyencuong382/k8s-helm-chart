{{- $module := .Values.service -}}
{{- if or ($module.imageTag) (.Values.image.tag) -}}
{{- $fullName := printf "%s-%s" (include "baseName.fullname" .) ($module.name | default "") | trunc 63 | trimSuffix "-" -}}
{{- $name := printf "%s-%s" (include "baseName.name" .) ($module.name | default "") | trunc 63 | trimSuffix "-" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullName }}
  labels:
    app.kubernetes.io/name: {{ $name }}
    helm.sh/chart: {{ include "baseName.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.deployment.replicaCount | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
       - name: {{ .Values.image.imagePullSecrets }} 
      {{- end }}
      {{- if .Values.securityContext }}
      securityContext:
      {{- toYaml .Values.securityContext | nindent 8 }} 
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ $module.imageTag | default .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- range $_, $port := .Values.service.ports }}
            - name: {{ $port.name }}
              containerPort: {{ $port.value }}
              protocol: TCP
            {{- end }}
          volumeMounts:
            {{- if .Values.deployment.volumeMounts }}
            {{- toYaml .Values.deployment.volumeMounts | default "" | nindent 12 }} 
            {{- end }}
            {{- if and (.Values.pvc) (.Values.pvc.enabled) }}
            - name: {{ $fullName }}
              mountPath: {{ .Values.pvc.mountPath }}
            {{- end }}
          {{ if .Values.deployment.livenessHttpGet }}
          livenessProbe:
            httpGet:
              path: {{ .Values.deployment.livenessHttpGet }}
              port: http
              scheme: {{ .Values.deployment.scheme | default "HTTP"  }}
            initialDelaySeconds: {{ .Values.deployment.initialDelaySeconds | default 0 }}
            failureThreshold: {{ .Values.deployment.failureThreshold | default 3 }}
          readinessProbe:
            httpGet:
              path: {{ .Values.deployment.readinessHttpGet | default .Values.deployment.livenessHttpGet }}
              port: http
              scheme: {{ .Values.deployment.scheme | default "HTTP"  }}
            initialDelaySeconds: {{ .Values.deployment.initialDelaySeconds | default 0 }}
          {{ end }}
          env:
            {{- include "common.env" . | indent 12 }}
            {{- if .Values.deployment.envFrom }}
            {{- toYaml .Values.deployment.envFrom | nindent 12 }} 
            {{- end }}
          envFrom:
            {{- if and (.Values.secret) (.Values.secret.enabled) }}
            - secretRef:
                name: {{ .Values.secret.name | default $fullName }}
            {{- end }}
          resources:
          {{- if .Values.resources }}
          {{- toYaml .Values.resources | default "" | nindent 12 }} 
          {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      {{- if .Values.deployment.volumes }}
      {{- toYaml .Values.deployment.volumes | default "" | nindent 8 }} 
      {{- end }}
      {{- if and (.Values.pvc) (.Values.pvc.enabled) }}
      - name: {{ $fullName }}
        persistentVolumeClaim:
          claimName: {{ $fullName }}
      {{- end }}
{{- end -}}

